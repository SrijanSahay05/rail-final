services:
  db:
    image: postgres:15
    env_file:
      - .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    ports:
      - "5432:5432"

  web:
    build:
      context: .
      dockerfile: dockerfile.prod
    command: >
      sh -c "python manage.py collectstatic --noinput &&
         python manage.py makemigrations &&
         python manage.py migrate &&
         gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env.prod
    depends_on:
      - db
    restart: unless-stopped
    expose:
      - "8000"
  
  certbot:
    image: certbot/certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    env_file:
      - .env.prod
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem ]; then
          echo 'Generating SSL certificate for $${DOMAIN}...';
          certbot certonly --webroot --webroot-path=/var/www/certbot --email $${SSL_EMAIL} --agree-tos --no-eff-email -d $${DOMAIN};
        else
          echo 'SSL certificate already exists';
        fi;
        while true; do
          sleep 12h;
          certbot renew --webroot --webroot-path=/var/www/certbot;
        done
      "
    restart: unless-stopped
  
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - web
      - certbot
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
  certbot_data:
  certbot_www:

